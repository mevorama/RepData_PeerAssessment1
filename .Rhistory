url[1] <- "http://www.betfair.com/exchange/football/coupon?id=3&goingInPlay=false"
url<-c()
url[1] <- "http://www.betfair.com/exchange/football/coupon?id=3&goingInPlay=false"
html <- htmlTreeParse(url[1], useInternalNodes=T)
while (length(xpathSApply(html, "//a[@class='next-page']", xmlValue)) != 0 && i<3){
i = i+1
url[i] <- paste(url[1], "&fdcpage=", i, sep="")
html <- htmlTreeParse(url[i], useInternalNodes=T)
filltable(html)
}
i=0
url<-c()
url[1] <- "http://www.betfair.com/exchange/football/coupon?id=3&goingInPlay=false"
html <- htmlTreeParse(url[1], useInternalNodes=T)
Complete <- data.frame()
filltable(html)
i=1
while (length(xpathSApply(html, "//a[@class='next-page']", xmlValue)) != 0 && i<3){
i = i+1
url[i] <- paste(url[1], "&fdcpage=", i, sep="")
html <- htmlTreeParse(url[i], useInternalNodes=T)
filltable(html)
}
View(Complete)
library(XML)
filltable <- function(html){
Home <- xpathSApply(html, "//span[@class='home-team']", xmlValue)
Score <- xpathSApply(html, "//span[@class='result']", xmlValue)
Away <- xpathSApply(html, "//span[@class='away-team']", xmlValue)
Time <- xpathSApply(html, "//span[@class='start-time period-emphasis']|//span[@class='start-time ']", xmlValue)
Homeback <- xpathSApply(html, "//td[@class='odds back selection-1']//span[@class='price']", xmlValue)
Homeback <- lapply(Homeback, gsub, pattern="\\D", replacement="")
Homeback <- as.numeric(Homeback)
Homelay <- xpathSApply(html, "//td[@class='odds lay selection-1']//span[@class='price']", xmlValue)
Homelay <- lapply(Homelay, gsub, pattern="\\D", replacement="")
Homelay <- as.numeric(Homelay)
Drawback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Drawback <- lapply(Drawback, gsub, pattern="\\D", replacement="")
Drawback <- as.numeric(Drawback)
Drawlay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Drawlay <- lapply(Drawlay, gsub, pattern="\\D", replacement="")
Drawlay <- as.numeric(Drawlay)
Awayback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Awayback <- lapply(Awayback, gsub, pattern="\\D", replacement="")
Awayback <- as.numeric(Awayback)
Awaylay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Awaylay <- lapply(Awaylay, gsub, pattern="\\D", replacement="")
Awaylay <- as.numeric(Awaylay)
Table <- cbind(Home,Score,Away,Time,Homeback,Homelay,Drawback,Drawlay,Awayback,Awaylay)
Complete <<- rbind(Complete,Table)
}
url<-c()
url[1] <- "http://www.betfair.com/exchange/football/coupon?id=4&goingInPlay=false"
html <- htmlTreeParse(url[1], useInternalNodes=T)
Complete <- data.frame()
filltable(html)
i=1
while (length(xpathSApply(html, "//a[@class='next-page']", xmlValue)) != 0 && i<3){
i = i+1
url[i] <- paste(url[1], "&fdcpage=", i, sep="")
html <- htmlTreeParse(url[i], useInternalNodes=T)
filltable(html)
}
View(Complete)
url<-c()
url[1] <- "http://www.betfair.com/exchange/football/coupon?id=4&goingInPlay=false"
html <- htmlTreeParse(url[1], useInternalNodes=T)
Complete <- data.frame()
filltable(html)
i=1
while (length(xpathSApply(html, "//a[@class='next-page']", xmlValue)) != 0 && i<3){
i = i+1
url[i] <- paste(url[1], "&fdcpage=", i, sep="")
html <<- htmlTreeParse(url[i], useInternalNodes=T)
filltable(html)
}
url
View(Complete)
filltable <- function(url){
html <- htmlTreeParse(url, useInternalNodes=T)
Home <- xpathSApply(html, "//span[@class='home-team']", xmlValue)
Score <- xpathSApply(html, "//span[@class='result']", xmlValue)
Away <- xpathSApply(html, "//span[@class='away-team']", xmlValue)
Time <- xpathSApply(html, "//span[@class='start-time period-emphasis']|//span[@class='start-time ']", xmlValue)
Homeback <- xpathSApply(html, "//td[@class='odds back selection-1']//span[@class='price']", xmlValue)
Homeback <- lapply(Homeback, gsub, pattern="\\D", replacement="")
Homeback <- as.numeric(Homeback)
Homelay <- xpathSApply(html, "//td[@class='odds lay selection-1']//span[@class='price']", xmlValue)
Homelay <- lapply(Homelay, gsub, pattern="\\D", replacement="")
Homelay <- as.numeric(Homelay)
Drawback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Drawback <- lapply(Drawback, gsub, pattern="\\D", replacement="")
Drawback <- as.numeric(Drawback)
Drawlay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Drawlay <- lapply(Drawlay, gsub, pattern="\\D", replacement="")
Drawlay <- as.numeric(Drawlay)
Awayback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Awayback <- lapply(Awayback, gsub, pattern="\\D", replacement="")
Awayback <- as.numeric(Awayback)
Awaylay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Awaylay <- lapply(Awaylay, gsub, pattern="\\D", replacement="")
Awaylay <- as.numeric(Awaylay)
Table <- cbind(Home,Score,Away,Time,Homeback,Homelay,Drawback,Drawlay,Awayback,Awaylay)
Complete <<- rbind(Complete,Table)
}
url<-c()
url[1] <- "http://www.betfair.com/exchange/football/coupon?id=4&goingInPlay=false"
html1 <- htmlTreeParse(url[1], useInternalNodes=T)
Complete <- data.frame()
filltable(url[1])
i=1
while (length(xpathSApply(html, "//a[@class='next-page']", xmlValue)) != 0 && i<3){
i = i+1
url[i] <- paste(url[1], "&fdcpage=", i, sep="")
filltable(url[i])
}
View(Complete)
View(Complete)
library(XML)
url<-c()
url[1] <- "http://www.betfair.com/exchange/football/coupon?id=4&goingInPlay=false"
Complete <- data.frame()
filltable(url[1])
filltable <- function(url){
html <- htmlTreeParse(url, useInternalNodes=T)
Home <- xpathSApply(html, "//span[@class='home-team']", xmlValue)
Score <- xpathSApply(html, "//span[@class='result']", xmlValue)
Away <- xpathSApply(html, "//span[@class='away-team']", xmlValue)
Time <- xpathSApply(html, "//span[@class='start-time period-emphasis']|//span[@class='start-time ']", xmlValue)
Homeback <- xpathSApply(html, "//td[@class='odds back selection-1']//span[@class='price']", xmlValue)
Homeback <- lapply(Homeback, gsub, pattern="\\D", replacement="")
Homeback <- as.numeric(Homeback)
Homelay <- xpathSApply(html, "//td[@class='odds lay selection-1']//span[@class='price']", xmlValue)
Homelay <- lapply(Homelay, gsub, pattern="\\D", replacement="")
Homelay <- as.numeric(Homelay)
Drawback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Drawback <- lapply(Drawback, gsub, pattern="\\D", replacement="")
Drawback <- as.numeric(Drawback)
Drawlay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Drawlay <- lapply(Drawlay, gsub, pattern="\\D", replacement="")
Drawlay <- as.numeric(Drawlay)
Awayback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Awayback <- lapply(Awayback, gsub, pattern="\\D", replacement="")
Awayback <- as.numeric(Awayback)
Awaylay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Awaylay <- lapply(Awaylay, gsub, pattern="\\D", replacement="")
Awaylay <- as.numeric(Awaylay)
Table <- cbind(Home,Score,Away,Time,Homeback,Homelay,Drawback,Drawlay,Awayback,Awaylay)
Complete <<- rbind(Complete,Table)
}
filltable(url[1])
url[2] <- paste(url[1], "&fdcpage=", 2, sep="")
filltable(url[2])
View(Complete)
url[2]
filltable("http://www.betfair.com/exchange/football/coupon?id=4&goingInPlay=false&fdcpage=2")
View(Complete)
filltable("http://www.betfair.com/exchange/football/coupon?id=4&goingInPlay=false&fdcpage=2")
html
html <- htmlTreeParse("http://www.betfair.com/exchange/football/coupon?id=4&goingInPlay=false&fdcpage=2", useInternalNodes=T)
xpathSApply(html, "//span[@class='home-team']", xmlValue)
library(XML)
filltable <- function(url){
html <- htmlTreeParse(url, useInternalNodes=T)
Home <- xpathSApply(html, "//span[@class='home-team']", xmlValue)
Score <- xpathSApply(html, "//span[@class='result']", xmlValue)
Away <- xpathSApply(html, "//span[@class='away-team']", xmlValue)
Time <- xpathSApply(html, "//span[@class='start-time period-emphasis']|//span[@class='start-time ']", xmlValue)
Homeback <- xpathSApply(html, "//td[@class='odds back selection-1']//span[@class='price']", xmlValue)
Homeback <- lapply(Homeback, gsub, pattern="\\D", replacement="")
Homeback <- as.numeric(Homeback)
Homelay <- xpathSApply(html, "//td[@class='odds lay selection-1']//span[@class='price']", xmlValue)
Homelay <- lapply(Homelay, gsub, pattern="\\D", replacement="")
Homelay <- as.numeric(Homelay)
Drawback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Drawback <- lapply(Drawback, gsub, pattern="\\D", replacement="")
Drawback <- as.numeric(Drawback)
Drawlay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Drawlay <- lapply(Drawlay, gsub, pattern="\\D", replacement="")
Drawlay <- as.numeric(Drawlay)
Awayback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Awayback <- lapply(Awayback, gsub, pattern="\\D", replacement="")
Awayback <- as.numeric(Awayback)
Awaylay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Awaylay <- lapply(Awaylay, gsub, pattern="\\D", replacement="")
Awaylay <- as.numeric(Awaylay)
Table <- cbind(Home,Score,Away,Time,Homeback,Homelay,Drawback,Drawlay,Awayback,Awaylay)
Complete <<- rbind(Complete,Table)
}
url<-c()
url[1] <- "http://www.betfair.com/exchange/football/coupon?id=4&goingInPlay=false"
html1 <- htmlTreeParse(url[1], useInternalNodes=T)
Complete <- data.frame()
filltable(url[1])
i=1
while (length(xpathSApply(html, "//a[@class='next-page']", xmlValue)) != 0 && i<3){
i = i+1
url[i] <- paste(url[1], "&fdcPage=", i, sep="")
filltable(url[i])
}
filltable <- function(html){
Home <- xpathSApply(html, "//span[@class='home-team']", xmlValue)
Score <- xpathSApply(html, "//span[@class='result']", xmlValue)
Away <- xpathSApply(html, "//span[@class='away-team']", xmlValue)
Time <- xpathSApply(html, "//span[@class='start-time period-emphasis']|//span[@class='start-time ']", xmlValue)
Homeback <- xpathSApply(html, "//td[@class='odds back selection-1']//span[@class='price']", xmlValue)
Homeback <- lapply(Homeback, gsub, pattern="\\D", replacement="")
Homeback <- as.numeric(Homeback)
Homelay <- xpathSApply(html, "//td[@class='odds lay selection-1']//span[@class='price']", xmlValue)
Homelay <- lapply(Homelay, gsub, pattern="\\D", replacement="")
Homelay <- as.numeric(Homelay)
Drawback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Drawback <- lapply(Drawback, gsub, pattern="\\D", replacement="")
Drawback <- as.numeric(Drawback)
Drawlay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Drawlay <- lapply(Drawlay, gsub, pattern="\\D", replacement="")
Drawlay <- as.numeric(Drawlay)
Awayback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Awayback <- lapply(Awayback, gsub, pattern="\\D", replacement="")
Awayback <- as.numeric(Awayback)
Awaylay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Awaylay <- lapply(Awaylay, gsub, pattern="\\D", replacement="")
Awaylay <- as.numeric(Awaylay)
Table <- cbind(Home,Score,Away,Time,Homeback,Homelay,Drawback,Drawlay,Awayback,Awaylay)
Complete <<- rbind(Complete,Table)
}
url<-c()
url[1] <- "http://www.betfair.com/exchange/football/coupon?id=4&goingInPlay=false"
html <- htmlTreeParse(url[1], useInternalNodes=T)
Complete <- data.frame()
filltable(url[1])
i=1
filltable(html)
i=1
while (length(xpathSApply(html, "//a[@class='next-page']", xmlValue)) != 0 && i<3){
i = i+1
url[i] <- paste(url[1], "&fdcPage=", i, sep="")
html <- htmlTreeParse(url[i], useInternalNodes=T)
filltable(html)
}
View(Complete)
?var
1*.1+2*.2+3*.3+4*.4
3/4
1*0.5+1*.5
1*0.5-1*0.5
1^2*0.5+(-1)^2*.5
library(XML)
filltable <- function(html){
Home <- xpathSApply(html, "//span[@class='home-team']", xmlValue)
Score <- xpathSApply(html, "//span[@class='result']", xmlValue)
Away <- xpathSApply(html, "//span[@class='away-team']", xmlValue)
Time <- xpathSApply(html, "//span[@class='start-time period-emphasis']|//span[@class='start-time ']", xmlValue)
Homeback <- xpathSApply(html, "//td[@class='odds back selection-1']//span[@class='price']", xmlValue)
Homeback <- lapply(Homeback, gsub, pattern="\\D", replacement="")
Homeback <- as.numeric(Homeback)
Homelay <- xpathSApply(html, "//td[@class='odds lay selection-1']//span[@class='price']", xmlValue)
Homelay <- lapply(Homelay, gsub, pattern="\\D", replacement="")
Homelay <- as.numeric(Homelay)
Drawback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Drawback <- lapply(Drawback, gsub, pattern="\\D", replacement="")
Drawback <- as.numeric(Drawback)
Drawlay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Drawlay <- lapply(Drawlay, gsub, pattern="\\D", replacement="")
Drawlay <- as.numeric(Drawlay)
Awayback <- xpathSApply(html, "//td[@class='odds back selection-3']//span[@class='price']", xmlValue)
Awayback <- lapply(Awayback, gsub, pattern="\\D", replacement="")
Awayback <- as.numeric(Awayback)
Awaylay <- xpathSApply(html, "//td[@class='odds lay selection-3']//span[@class='price']", xmlValue)
Awaylay <- lapply(Awaylay, gsub, pattern="\\D", replacement="")
Awaylay <- as.numeric(Awaylay)
Table <- cbind(Home,Score,Away,Time,Homeback,Homelay,Drawback,Drawlay,Awayback,Awaylay)
Complete <<- rbind(Complete,Table)
}
url<-c()
url[1] <- "http://www.betfair.com/exchange/football/coupon?id=1&goingInPlay=false"
html <- htmlTreeParse(url[1], useInternalNodes=T)
Complete <- data.frame()
filltable(html)
i=1
while (length(xpathSApply(html, "//a[@class='next-page']", xmlValue)) != 0 && i<3){
i = i+1
url[i] <- paste(url[1], "&fdcPage=", i, sep="")
html <- htmlTreeParse(url[i], useInternalNodes=T)
filltable(html)
}
View(Complete)
url<-c()
url[1] <- "http://www.betfair.com/exchange/football/coupon?id=1&goingInPlay=true"
html <- htmlTreeParse(url[1], useInternalNodes=T)
Complete <- data.frame()
filltable(html)
i=1
while (length(xpathSApply(html, "//a[@class='next-page']", xmlValue))){
i = i+1
url[i] <- paste(url[1], "&fdcPage=", i, sep="")
html <- htmlTreeParse(url[i], useInternalNodes=T)
filltable(html)
}
View(Complete)
setwd("C:/Documents and Settings/matt/Git/RepData_PeerAssessment1")
unzip(activity.zip)
unzip("activity.zip")
?as.numeric
?as.float
?as.double
table.df <- read.csv("activity.csv")
View(table.df)
class(table.df$date)
?strpdate
table.df$time <- strptime(table.df$time, format="%Y-%m-%d")
?strptime
?as.POSIXlt
as.Date
?as.Date
table.df$date <- strptime(table.df$date, format="%Y-%m-%d")
class(table.df$date)
View(table.df)
hist(table.df$steps,table.df$date)
hist(table.df$date,table.df$steps)
table.df$date[1]
class(table.df$date[1])
table.df$date <- as.Date(table.df$date)
class(table.df$date[1])
hist(table.df$date,table.df$steps)
hist(table.df$steps,table.df$date)
table.df$date[1] == table.df$date[2]
?hist
hist(table.df$steps)
table(table.df$steps,table.df$date)
table(table.df$date,table.df$steps)
library(reshape2)
table_melt <-melt(table.df,id=("date"))
table_sum <- dcast(table_melt, date ~ variable, sum)
View(table_sum)
hist(table_sum)
hist(table_sum$steps)
hist(table_sum$steps, xlab="Number of steps per day", main="")
?mean
?median
?mean
install.packages("knitr")
library(knitr)
setwd("C:/Documents and Settings/matt/Git/RepData_PeerAssessment1")
table_stepmelt <- melt(table.df,id=("step"))
table_intervalmelt <- melt(table.df,id=("interval"))
table_intervalavr <- dcast(table_intervalmelt, interval ~ variable, mean)
View(table_intervalavr)
table_intervalavr <- dcast(table_intervalmelt, interval ~ variable, mean, na.rm = TRUE)
View(table_intervalavr)
plot(table_intervalavr$steps, table_intervalavr$interval, type="l")
plot(table_intervalavr$interval, table_intervalavr$steps, type="l")
?max
?subset
max_steps <- subset(table_intervalavr, table_intervalavr$steps == max(table_intervalavr$steps))
max_interval <- max_steps$interval
max_interval
?melt
nrows(subset(table.df, is.na(table.df$steps)))
nrow(subset(table.df, is.na(table.df$steps)))
require('sqldf')
myFile <- 'household_power_consumption.txt'
mySql <- "SELECT * from file WHERE Date = '1/2/2007' OR Date = '2/2/2007'"
hpc <- read.csv2.sql(myFile, mySql, na.strings="?")
plot(table_intervalavr$interval, table_intervalavr$steps, type="l")
png(filename = "plot2.png", width = 480, height = 480)
dev.off()
?dim
library(plyr)
?join
table2.df <- table.df
for i in 1:nrow(table.df){
if (is.na(table.df$steps[i]){
table.df$steps[i] <- table_intervalavr[interval==table.df$interval[i],steps]
}
}
for (i in 1:nrow(table.df)){
if (is.na(table.df$steps[i]){
table.df$steps[i] <- table_intervalavr[interval==table.df$interval[i],steps]
}
}
for (i in 1:nrow(table.df)){
if (is.na(table.df$steps[i])){
table.df$steps[i] <- table_intervalavr[interval==table.df$interval[i],steps]
}
}
for (i in 1:nrow(table.df)){
if (is.na(table.df$steps[i])){
temp <- subset(table_intervalavr, table_intervalavr$interval==table.df$interval[i])
table.df$steps[i] <- temp$steps
}
}
View(table.df)
table_filled.df <- table.df
?weekdays
weekday("11/05/83")
weekdays("11/05/83")
weekdays("11/05/14")
weekdays("11/05/2014")
weekdays("05/11/2014")
weekdays("05/11/2014") == Sun
weekdays("05/11/2014") == "Sun"
?panelplot
library(lattice)
table_daytypemelt <- melt(table_filled.df, id=c("steps","daytype"))
for (i in 1:nrow(table_filled.df)){
if (weekdays(table_filled.df$date[i]) == "Sat" or weekdays(table_filled.df$date[i] == "Sun"){
table_filled.df$daytype[i] == "Weekend"
} else {
table_filled.df$daytype[i] == "Weekday"
}
}
for (i in 1:nrow(table_filled.df)){
if (weekdays(table_filled.df$date[i]) == "Sat" or weekdays(table_filled.df$date[i] == "Sun"){
table_filled.df$daytype[i] <- "Weekend"
} else {
table_filled.df$daytype[i] <- "Weekday"
}
}
for (i in 1:nrow(table_filled.df)){
if (weekdays(table_filled.df$date[i]) == "Sat")|(weekdays(table_filled.df$date[i] == "Sun"){
table_filled.df$daytype[i] <- "Weekend"
} else {
table_filled.df$daytype[i] <- "Weekday"
}
}
for (i in 1:nrow(table_filled.df)){
if (weekdays(table_filled.df$date[i]) == "Sat" | weekdays(table_filled.df$date[i] == "Sun"){
table_filled.df$daytype[i] <- "Weekend"
} else {
table_filled.df$daytype[i] <- "Weekday"
}
}
for (i in 1:nrow(table_filled.df)){
if (weekdays(table_filled.df$date[i]) == "Sat" || weekdays(table_filled.df$date[i] == "Sun"){
table_filled.df$daytype[i] <- "Weekend"
} else {
table_filled.df$daytype[i] <- "Weekday"
}
}
for (i in 1:nrow(table_filled.df)){
if (weekdays(table_filled.df$date[i]) == "Sat") {
table_filled.df$daytype[i] <- "Weekend"
} else if (weekdays(table_filled.df$date[i] == "Sun") {
table_filled.df$daytype[i] <- "Weekend"
} else {
table_filled.df$daytype[i] <- "Weekday"
}
}
for (i in 1:nrow(table_filled.df)){
if (weekdays(table_filled.df$date[i]) == "Sat") {
table_filled.df$daytype[i] <- "Weekend"
} else if (weekdays(table_filled.df$date[i]) == "Sun")) {
table_filled.df$daytype[i] <- "Weekend"
} else {
table_filled.df$daytype[i] <- "Weekday"
}
}
for (i in 1:nrow(table_filled.df)){
if (weekdays(table_filled.df$date[i]) == "Sat") {
table_filled.df$daytype[i] <- "Weekend"
} else if (weekdays(table_filled.df$date[i]) == "Sun") {
table_filled.df$daytype[i] <- "Weekend"
} else {
table_filled.df$daytype[i] <- "Weekday"
}
}
table_daytypemelt <- melt(table_filled.df, id=c("steps","daytype"))
table_daytypeavr <- dcast(table_daytypemelt, daytype, steps ~ variable, mean)
table_daytypeavr <- dcast(table_daytypemelt, daytype + steps ~ variable, mean)
View(table_daytypeavr)
View(table_filled.df)
table_daytypeavr <- dcast(table_daytypemelt, daytype + interval ~ variable, mean)
table_daytypemelt <- melt(table_filled.df, id=c("interval","daytype"))
table_daytypeavr <- dcast(table_daytypemelt, daytype + interval ~ variable, mean)
View(table_daytypeavr)
xyplot(steps ~ interval | daytype, data = table_daytypeavr, type="l")
View(table_daytypeavr)
weekdays(2012-10-01)
weekdays(2012-10-04)
xyplot(steps ~ interval | daytype, data = table_daytypeavr, layout=c(2,1) type="l")
xyplot(steps ~ interval | daytype, data = table_daytypeavr, layout=c(2,1), type="l")
xyplot(steps ~ interval | daytype, data = table_daytypeavr, layout=c(1,2), type="l")
weekdays(table_filled.df$date[992]
weekdays(table_filled.df$date[992])
weekdays(2012-10-04)
View(table_filled.df)
table_filled.df$date[992]
class(table_filled.df$date[992])
for (i in 1:nrow(table_filled.df)){
if (weekdays(table_filled.df$date[i]) == "Saturday") {
table_filled.df$daytype[i] <- "Weekend"
} else if (weekdays(table_filled.df$date[i]) == "Sunday") {
table_filled.df$daytype[i] <- "Weekend"
} else {
table_filled.df$daytype[i] <- "Weekday"
}
}
View(table_filled.df)
table_daytypemelt <- melt(table_filled.df, id=c("interval","daytype"))
table_daytypeavr <- dcast(table_daytypemelt, daytype + interval ~ variable, mean)
xyplot(steps ~ interval | daytype, data = table_daytypeavr, layout=c(1,2), type="l")
for (i in 1:nrow(table_filled.df)){
if (weekdays(table_filled.df$date[i]) == "Saturday" | weekdays(table_filled.df$date[i]) == "Sunday") {
table_filled.df$daytype[i] <- "Weekend"
} else {
table_filled.df$daytype[i] <- "Weekday"
}
}
table_daytypemelt <- melt(table_filled.df, id=c("interval","daytype"))
table_daytypeavr <- dcast(table_daytypemelt, daytype + interval ~ variable, mean)
xyplot(steps ~ interval | daytype, data = table_daytypeavr, layout=c(1,2), type="l")
